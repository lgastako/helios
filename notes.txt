Helios
======

Introduction
------------

Helios is a set of client/server tools for recording arbitrary
information about events(?) that occur in software systems.  It's like
syslog but more structure or like SNMP but more flexible and not as
stupid.

It consists of several components that work together:

- Client libraries.  (Prototyped in python).  The client libraries
  allow developers to make calls to record whatever it is that they
  want to record.

- Remote queue servers.  Optional components that help scale the data
  collection on the remote nodes.

- Centralized data store.  This is where all data ultimately ends up.
  While talked about as a singluar entity in most production
  deployments would probably be a large cluster of mongo db instances.

- Report server.  This is a webapp that makes information from the
  datastore available for ad-hoc queries to consumers.  Basically
  provides a pretty/easy UI on top of the mongo query facilities.


Design Decisions
----------------

NOTE: These are all in a state of flux and may change at any moment.

- The client should use only HTTP to communicate with the server,
  including sending the actual log messages.  This means that various
  cross-cutting concerns like security and load balancing can be
  off-loaded to systems optimized for handling these concerns.

  It also eliminates a the mongo client dependency in each client
  implementation.

  - The obvious corollary to this is that the HTTP communication
    should be optimized using e.g. Keep-Alives and/or HTTP pipelining.
    Of course the spec says that pipelining should not be used for non
    idempotent requests like POSTs and our API should be POST oriented
    so that there is no restriction on payload size.  It may or may
    not also be a good idea to keep multiple connections per client
    open.

    - The obvious corollary to this is that the server should respond
      with a success or error message ASAP (and e.g. do queueing on
      the server side as well) so that the server is not responsible
      for causing a backup on the client side.  Of course if we're
      trying to be as fault tolerant as possible and prevent data loss
      as much as possible then we should be committing the events to
      some sort of persistent (think f-sync'd) store on the server
      side before acknowledging.

    - Another corrollary here is that since the server is going to
      already be handling an extremely high number of persistent
      connections (due to e.g. lots of apps writing lots of stuff) if
      we're adding on top of that possibly multiple http connections
      then the server will have to be extremely efficient about
      handling connections which means it should probably be
      event-driven (e.g. twisted, tornado, etc).


Open Questions
--------------

- Compression (gzip or otherwise) between client and server?

- ZeroMQ on the client side?  On the server side?

- UDP?


Client API
----------

API calls MUST return immediately.

 - Suggested implementation: Put on an in-process queue.  A
   thread/process/etc picks up the message from the in-process queue
   and depending on configuration either writes it to an
   out-of-process queue or sends it directly to the remote recorder
   server thing.

API calls MUST never raise an exception.

API calls MUST log using the default logging mechanism if they fail to
handle a document.  The logged message MUST contain the entire
document.  [Caveat: if it's under a certain size?... maybe SHOULD for
this case and/or any other case where something about the document
makes it un loggable]

In theory client APIs should provide the ability to send stuff to
different helios servers, but really that kinda goes against the point
of it, so for now, no.

... Should we have priorities or does that just complicate things?

... Should we send current timestamp and let the server do adjustments or what?


Client Configuration
--------------------

Here are my thoughts on client configuration currently (very much
subject to change):

1. Make sure clients always have a sensible set of defaults.  Ideally
   the defaults would be part of the spec so that all clients in all
   languages would have the same or at least very similar defaults.

2. The client will look for a config file in some default location
   (does python have a java-like getresource type of thing? do other
   languages in general?) and if it's not there it will check for an
   environment variable (e.g. "HELIOS_CFG_FILE", etc) and if it exists
   it will try to read that file.  If no config file exists then
   everything will be the default.

  - Open question: what should the behavior be if a HELIOS_CFG_FILE
    was specified but doesn't exist?

3. The default localhost to write to should be some port on localhost.
   There should exist a store-and-forward server that you can start on
   all remote hosts which is configured to forward to the central
   server.  Then if you run this on all of your remote hosts you can
   probably get away with zero configuration and you get an extra
   layer of reliability.

   - Obviously the default config of the store-and-forwarder should be
     sensible and in general only the central host(s) should be
     provided, perhaps even on the command line instead of in a config
     file?

- Open question: Format for the config files?  If it was python only
  I'd like to use ConfigParser, but should we have a standard format
  for all clients or let them default to their respective language's
  different confing file formats (e.g. configparser for python but
  properties files and/or xml for java, yaml for ruby, json for
  ssjs, etc?)


Other junk
----------
http://www.mongodb.org/display/DOCS/Using+a+Large+Number+of+Collections

That page says there's a cap of 24k namespaces and each collection
counts as a namespace as does each index so if there's one index per
collection thats a max of 12k collections, less if you have more
indexes.

Though it does say there's an --nssize option to adjust.  Max size for
namespace file is 2gb but it doesn't say how many ns's that'd
accomodate.

Maybe we should just put all events in one collection with a key that
is the type instead of making a collection per type.

Or, do something even more awesome.
